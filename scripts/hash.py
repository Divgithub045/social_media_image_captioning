# -*- coding: utf-8 -*-
"""hashRecomendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rZyI056JeNSEP4_jHlSoSwhZnLBaom9a
"""

#imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import torch
import torch.nn.functional as F
# from transformers import ViTModel, ViTFeatureExtractor,ViTImageProcessor
from transformers import ViTModel, ViTImageProcessor

from PIL import Image
from torchvision.transforms.functional import to_tensor,to_pil_image
from sentence_transformers import SentenceTransformer
# from image_encoder import encode_image
# from text_encoder import encode_text
# from torch.utils.data import Dataset, DataLoader

print("Hello, hash.py here!")

torch.cuda.is_available()

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

vit_model = ViTModel.from_pretrained('google/vit-base-patch16-224')
vit_model.to(device)
vit_model.eval()
vit_name='google/vit-base-patch16-224'
vit_processor = ViTImageProcessor.from_pretrained(vit_name)

def encode_image(image_path,pool="cls"):
  print("Encoding image:", image_path)
  img = Image.open(image_path).convert('RGB')
  inputs = vit_processor(images=img, return_tensors="pt")
  inputs = inputs.to(device)
  with torch.no_grad():
    outputs = vit_model(**inputs)
    last_hidden_states = outputs.last_hidden_state
    if pool=="cls":
      emb = last_hidden_states[:,0,:]
    else:
      emb = last_hidden_states[:1:,:].mean(dim=1)
  emb = F.normalize(emb, p=2, dim=1)
  return emb
print("Image Encoding Complete.")

text_model = SentenceTransformer('sentence-transformers/all-mpnet-base-v2') # This model outputs 768 dimensions
text_model.to(device)
def encode_prompts(prompts):
  return text_model.encode(prompts,convert_to_tensor=True,normalize_embeddings=True).to(device)

def match_prompts(image_emb,prompt_embeds,prompt_list,top_k=1):
  scores =  F.cosine_similarity(image_emb,prompt_embeds,dim=-1)
  topk_idx = torch.topk(scores,k=top_k,dim=-1).indices
  topk_prompt = [prompt_list[i] for i in topk_idx]
  return topk_prompt

def generate_hashtag(color,mood,activity,scene,lighting,mood_key,color_key):
  return f"#: {mood.lower()}, #:{color.lower()}, Mood_key: {mood_key.lower()}, Color_key: {color_key.lower()}, Activity: {activity.lower()}, Scene: {scene.lower()}, Lighting: {lighting.lower()}"

def process_image(image_path,color_prompts,mood_prompts):
  print("Processing image in hash.py:", image_path)
  image_emb = encode_image(image_path)
  color_embeds = encode_prompts(color_prompts)
  color_key_embeds = encode_prompts(color_key)
  color_key_match = match_prompts(image_emb,color_key_embeds,color_key)
  mood_key_embeds = encode_prompts(mood_key)
  mood_key_match = match_prompts(image_emb,mood_key_embeds,mood_key)
  activity_embeds = encode_prompts(activity)
  activity_match = match_prompts(image_emb,activity_embeds,activity)
  scene_embeds = encode_prompts(scene)
  scene_match = match_prompts(image_emb,scene_embeds,scene)
  lighting_embeds = encode_prompts(lighting)
  lighting_match = match_prompts(image_emb,lighting_embeds,lighting)
  mood_embeds = encode_prompts(mood_prompts)
  color_match = match_prompts(image_emb,color_embeds,color_prompts)
  mood_match = match_prompts(image_emb,mood_embeds,mood_prompts)
  print("Matches found:")
  print("Color:", color_match)
  print("Mood:", mood_match)
  print("Activity:", activity_match)
  print("Scene:", scene_match)
  print("Lighting:", lighting_match)
  print("Mood_key:", mood_key_match)
  print("Color_key:", color_key_match)
  return generate_hashtag(color_match[0],mood_match[0],activity_match[0],scene_match[0],lighting_match[0],mood_key_match[0],color_key_match[0])

color_prompts= [
    # Warm / Sunset (Colors)
    "sunsetorange", "eveningglow", "softpink", "peachytone", "darkorange", "claybrown", "sandyshade", "fallcolors", "lightpink", "copperglow",

    # Cool / Ocean (Colors)
    "oceanblue", "darkblue", "clearblue", "nightblue", "iceblue", "seagreen", "aquablue", "tealshade", "greyblue", "coolblue",

    # Nature / Earth (Colors)
    "forestgreen", "greenmoss", "olivebrown", "lightgreen", "brownshade", "pinegreen", "woodytones", "stonegrey", "soilbrown", "leafgreen",

    # Neutral / Classic (Colors)
    "darkgrey", "silvershade", "blackwhite", "creamchoco", "purewhite", "sandshade", "lightbrown", "beigetone", "pearlwhite", "jetblack",

    # Fun / Bright (Colors)
    "rainbowsoft", "neoncolors", "bubblepink", "brightyellow", "mintgreen", "lavendershade", "rainbowtones", "redbright", "brightblue", "sunnyyellow",

    # Deep / Elegant (Colors)
    "winecolor", "darkmaroon", "deepblack", "plumcolor", "greytone", "royalblue", "darkgreen", "deepblue", "rubyred", "goldglow"
]
Mood_prompts=[
    # Positive / Happy (Mood)
    "happyvibes", "goodmoments", "smilemore", "positivethoughts", "purehappy", "sunnydays", "goodenergy", "cheerfulmood", "brightmind", "funmoments",

    # Relaxed / Chill (Mood)
    "calmvibes", "relaxmood", "easyweekend", "chillday", "cozymood", "peacefulvibes", "quiettime", "clearhead", "softvibes", "sundaychill",

    # Sad / Reflective (Mood)
    "lonelybutnice", "sadthoughts", "sweetpain", "tearstoday", "bluefeeling", "deepthoughts", "heartfeltmood", "quiettears", "thinkingtime", "softsadness",

    # Love / Romance (Mood)
    "romanticmood", "loveintheair", "sweetmoments", "warmfeeling", "hugtime", "softlove", "passionvibes", "lovelight", "caringheart", "simplelove",

    # Energetic / Party (Mood)
    "partynight", "weekendfun", "goodtimes", "wildvibes", "danceallnight", "highenergy", "celebrationtime", "nightfun", "superexcited", "cheerstolife"

# Artsy / Aesthetic (Mood)
"moodyvibes", "softlook", "dreamyvibes", "creativefeel", "colorfulmind", "aestheticvibes", "retrolook", "creativeflow", "simplemood", "poeticvibes"

# Mixed / Everyday Life (Mood)
"carefreevibes", "confidentmood", "playfulfeel", "curiousmind", "thankfulheart", "newstart", "innerstrength", "coolmood", "hopefulheart", "inspiredmind"]

# 1️⃣ Activity / Action
activity = [
    "Standing", "Sitting", "Running", "Dancing", "Reading", "Partying", "Traveling",  "Swimming"
]

# 2️⃣ Scene / Setting
scene= [
    "Indoor", "Outdoor", " Beach","Mountains", "Cityscape", "Countryside", "Forest", "Desert","River"
]

# 3️⃣ Mood / Emotion
mood_key= [
    "happy", "sad", "excited", "calm", "angry", "romantic", "anxious", "peaceful", "joyful",
]

# 4️⃣ Lighting / Color Tone
lighting = [
    "Natural light", "Golden hour", "Soft light", "Harsh light", "Backlit", "Low light", "Studio light", "Candlelight", "Neon light", "Overcast",
]

# 5️⃣ Color Palette
color_key = [
    "red", "blue", "green", "yellow", "orange", "purple", "pink", "white", "black", "gray",
    "brown", "gold", "silver", "cyan", "magenta", "teal", "lime", "navy", "maroon", "olive"
]

 
# image_path = "C:/Users/acer/Desktop/MINOR/saumya.jpg"
# result = process_image(image_path, color_prompts, Mood_prompts)
# print("Processed:", image_path)
# print(result)
# # Optional: preview image
# img = Image.open(image_path)
# img.show()

